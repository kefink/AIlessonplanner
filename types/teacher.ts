/**
 * Teacher Profile and Class Management Types
 * For automated lesson plan generation
 */

export interface TeacherProfile {
  id: string;
  personalInfo: {
    name: string;
    employeeId: string;
    email: string;
    phone?: string;
    subjects: string[];
    grades: string[];
    department?: string;
  };
  schedule: {
    termDates: {
      start: Date;
      end: Date;
      currentWeek: number;
      totalWeeks: number;
    };
    workingDays: string[]; // ['Monday', 'Tuesday', ...]
    dailySchedule: ClassSchedule[];
  };
  preferences: {
    lessonDuration: number; // in minutes
    teachingStyle: 'traditional' | 'interactive' | 'project-based' | 'mixed';
    assessmentPreferences: string[];
    reflectionReminders: boolean;
  };
  school: {
    name: string;
    code: string;
    county: string;
    level: 'primary' | 'secondary' | 'mixed';
  };
  createdAt: Date;
  updatedAt: Date;
  isActive: boolean;
}

export interface ClassSchedule {
  id: string;
  grade: string;
  subject: string;
  className: string; // e.g., "Grade 7A", "Form 2 Blue"
  rollNumber: number;
  dayOfWeek: string;
  timeSlot: {
    start: string; // "08:00"
    end: string;   // "08:40"
  };
  room?: string;
  studentCount: number;
}

export interface ClassInfo {
  id: string;
  grade: string;
  subject: string;
  className: string;
  rollNumber: number;
  students: Student[];
  schedule: ClassSchedule;
  currentWeek: number;
  currentLesson: number;
  curriculum: {
    strand: string;
    subStrand: string;
    topics: string[];
  };
}

export interface Student {
  id: string;
  name: string;
  admissionNumber: string;
  grade: string;
  stream?: string;
  specialNeeds?: string[];
  parentContact?: string;
}

export interface AutoGenerationParams {
  // Auto-populated from teacher profile
  teacher: string;
  teacherId: string;
  school: string;
  
  // Auto-populated from class info
  grade: string;
  subject: string;
  className: string;
  rollNumber: number;
  studentCount: number;
  
  // Auto-populated from schedule
  date: string;
  time: string;
  duration: number;
  
  // Auto-populated from curriculum tracking
  week: number;
  lesson: number;
  strand: string;
  subStrand: string;
  
  // Optional overrides
  specificTopic?: string;
  customObjectives?: string[];
  specialInstructions?: string;
}

export interface LessonMetadata {
  id: string;
  teacherId: string;
  classId: string;
  generatedAt: Date;
  scheduledFor: Date;
  status: 'draft' | 'ready' | 'delivered' | 'reflected';
  autoGenerated: boolean;
  modificationsCount: number;
  lastModified: Date;
  approvalStatus: 'pending' | 'approved' | 'rejected';
  approvedBy?: string;
  approvedAt?: Date;
}

export interface TeacherReflection {
  id: string;
  lessonId: string;
  teacherId: string;
  submittedAt: Date;
  content: {
    whatWorkedWell: string;
    challenges: string;
    studentEngagement: 'low' | 'medium' | 'high';
    objectivesMet: boolean;
    timeManagement: 'poor' | 'adequate' | 'excellent';
    resourcesEffectiveness: 'poor' | 'adequate' | 'excellent';
    suggestedImprovements: string;
    nextLessonPreparation: string;
  };
  aiInsights?: {
    patterns: string[];
    suggestions: string[];
    strengths: string[];
    areasForImprovement: string[];
  };
}

export interface WeeklyPlanningData {
  teacherId: string;
  week: number;
  classes: ClassInfo[];
  plannedLessons: {
    classId: string;
    lessonNumber: number;
    topic: string;
    status: 'planned' | 'generated' | 'delivered';
    scheduledDate: Date;
  }[];
  completionRate: number;
  upcomingDeadlines: {
    type: 'assessment' | 'reflection' | 'planning';
    date: Date;
    description: string;
  }[];
}

// Utility types for form handling
export interface TeacherProfileForm {
  personalInfo: Omit<TeacherProfile['personalInfo'], 'subjects' | 'grades'> & {
    subjects: { value: string; label: string }[];
    grades: { value: string; label: string }[];
  };
  schedule: {
    termStart: string;
    termEnd: string;
    workingDays: string[];
  };
  preferences: TeacherProfile['preferences'];
  school: TeacherProfile['school'];
}

export interface ClassSetupForm {
  grade: string;
  subject: string;
  className: string;
  rollNumber: number;
  studentCount: number;
  schedule: {
    dayOfWeek: string;
    startTime: string;
    endTime: string;
    room?: string;
  };
}

// API Response types
export interface TeacherProfileResponse {
  success: boolean;
  data?: TeacherProfile;
  error?: string;
}

export interface ClassListResponse {
  success: boolean;
  data?: ClassInfo[];
  error?: string;
}

export interface AutoGenerationResponse {
  success: boolean;
  data?: {
    params: AutoGenerationParams;
    schemeOfWork: any;
    lessonPlan: any;
    metadata: LessonMetadata;
  };
  error?: string;
}
